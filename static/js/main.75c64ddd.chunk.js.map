{"version":3,"sources":["companents/score/Score.tsx","companents/button/Button.tsx","companents/setCount/SetCount.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Score","props","startCount","maxCount","activeMaxCount","activeMinCount","className","text","count","Button","onClick","buttonFunction","disabled","title","SetCount","setText","type","value","onChange","e","setActiveMinCount","setStartCount","startCurrentCount","Number","currentTarget","setToLocalStorage","onChangeStartCount","onFocus","setActiveMaxCount","maxCurrentCount","setMaxCount","onChangeMaxcount","setFunc","disabledSetButton","App","useState","setCount","start","localStorage","getItem","end","key","setItem","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75c64ddd.chunk.js","sourcesContent":["import React from \"react\"\n\ntype ScorePropsType = {\n\tcount: number\n\ttext: string\n\tmaxCount: number \n\tstartCount: number\n\tactiveMaxCount: boolean\n\tactiveMinCount: boolean\n}\n\nexport const Score: React.FC<ScorePropsType> = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t{props.startCount < 0 ||\n\t\t\tprops.maxCount < 0 ||\n\t\t\tprops.activeMaxCount ||\n\t\t\tprops.activeMinCount ? (\n\t\t\t\t<div\n\t\t\t\t\tclassName={props.text === \"Incorrect count!\" ? \"countEnd\" : \"count\"}\n\t\t\t\t>\n\t\t\t\t\t{\" \"}\n\t\t\t\t\t{props.text}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className={props.count === props.maxCount ? \"countEnd\" : \"count\"}>\n\t\t\t\t\t{props.count}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n","import React from \"react\"\n\ntype ButtonPropsType = {\n\ttitle: string\t\n\tcount: number\n\tbuttonFunction: () => void\n\tdisabled: (count: number) => boolean\n}\n\nexport const Button: React.FC <ButtonPropsType>=(props)=> {\n\treturn (\n\t\t<div>\n\t\t\t<button\n\t\t\t\tclassName=\"button\"\n\t\t\t\tonClick={props.buttonFunction}\n\t\t\t\tdisabled={props.disabled(props.count)}\n\t\t\t>\n\t\t\t\t{props.title}\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n","import React, { ChangeEvent } from \"react\"\nimport { Button } from \"../button/Button\"\n\ntype SetCountPropsType = {\n\ttext: string\n\tsetText: (text: string) => void\n\tcount: number\n\tsetFunc: () => void\n\tmaxCount: number\n\tsetMaxCount: (count: number) => void\n\tstartCount: number\n\tsetStartCount: (count: number) => void\n\tsetActiveMaxCount: (count: boolean) => void\n\tsetActiveMinCount: (count: boolean) => void\n\tdisabledSetButton: (count: number) => boolean\n\tsetToLocalStorage: (key: string, count: number) => void\n}\n\nexport const SetCount: React.FC<SetCountPropsType> = (props) => {\n\t;(props.startCount === 0 && props.maxCount > 0) ||\n\t(props.maxCount > 0 &&\n\t\tprops.maxCount > props.startCount &&\n\t\tprops.startCount >= 0)\n\t\t? props.setText(`Enter count and press 'set'`)\n\t\t: props.setText(\"Incorrect count!\")\n\n\tconst onChangeStartCount = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tprops.setActiveMinCount(true)\n\t\tprops.setStartCount(0)\n\t\tlet startCurrentCount = Number(e.currentTarget.value)\n\t\tprops.setToLocalStorage(\"start\", startCurrentCount)\n\t\tprops.setStartCount(startCurrentCount)\n\t}\n\tconst onChangeMaxcount = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tprops.setActiveMaxCount(true)\n\t\tlet maxCurrentCount: number = Number(e.currentTarget.value)\n\t\tprops.setToLocalStorage(\"end\", maxCurrentCount)\n\t\tprops.setMaxCount(maxCurrentCount)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className='startMaxValue'>\n\t\t\t\t<div className='start'>\n\t\t\t\t\t<span className='min'>\n\t\t\t\t\t\t<i>Start count:</i>\n\t\t\t\t\t</span>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tprops.text === \"Incorrect count!\" ? `inputRed` : `endInput`\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalue={props.startCount}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tonChangeStartCount(e)\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonFocus={() => {\n\t\t\t\t\t\t\tprops.setActiveMinCount(true)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className='start'>\n\t\t\t\t\t<span className='max'>\n\t\t\t\t\t\t<i>Max count:</i>{\" \"}\n\t\t\t\t\t</span>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tprops.text === \"Incorrect count!\" ? \"inputRed\" : `startInput`\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalue={props.maxCount}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tonChangeMaxcount(e)\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonFocus={() => {\n\t\t\t\t\t\t\tprops.setActiveMaxCount(true)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Button\n\t\t\t\t\ttitle={\"set\"}\n\t\t\t\t\tcount={props.count}\n\t\t\t\t\tbuttonFunction={props.setFunc}\n\t\t\t\t\tdisabled={props.disabledSetButton}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React, { useState } from \"react\"\nimport \"./App.css\"\nimport { Score } from \"./companents/score/Score\"\nimport { Button } from \"./companents/button/Button\"\nimport { SetCount } from \"./companents/setCount/SetCount\"\n\nexport type TextType = `Enter count and press 'set'` | `Incorrect count!`\n\nexport const App: React.FC = () => {\n\tconst [count, setCount] = useState<number>(0)\n\tconst [text, setText] = useState<TextType>(`Enter count and press 'set'`)\n\n\tconst [activeMaxCount, setActiveMaxCount] = useState<boolean>(true)\n\tconst [activeMinCount, setActiveMinCount] = useState<boolean>(true)\n\n\tconst start = localStorage.getItem(\"start\")\n\tconst end = localStorage.getItem(\"end\")\n\tconst [maxCount, setMaxCount] = useState<number>(Number(end))\n\tconst [startCount, setStartCount] = useState<number>(Number(start))\n\n\tconst setFunc = () => {\n\t\tsetCount(startCount)\n\t\tsetActiveMaxCount(false)\n\t\tsetActiveMinCount(false)\n\t}\n\n\tconst setToLocalStorage = (key: string, count: number) => {\n\t\tlocalStorage.setItem(key, count.toString())\n\t}\n\tconst incFunc = () => {\n\t\tif (count >= startCount && count <= maxCount) {\n\t\t\tsetCount(count + 1)\n\t\t}\n\t}\n\tconst resFunc = () => {\n\t\tsetCount(0)\n\t}\n\n\t// disabled\n\tconst disabledSetButton = (count: number) => {\n\t\tif (\n\t\t\tmaxCount &&\n\t\t\tstartCount >= 0 &&\n\t\t\tmaxCount > startCount &&\n\t\t\tmaxCount !== startCount &&\n\t\t\tmaxCount > 0 &&\n\t\t\tstartCount >= 0\n\t\t) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n\tconst disabledIncButton = (count: number) => {\n\t\tif (\n\t\t\tcount >= 0 &&\n\t\t\tcount < maxCount &&\n\t\t\tcount >= startCount &&\n\t\t\t!activeMaxCount &&\n\t\t\t!activeMinCount\n\t\t) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n\tconst disabledResButton = (count: number) => {\n\t\treturn count <= 0\n\t}\n\n\tconst setTxt = (text: string) => {\n\t\t(startCount === 0 && maxCount > 0) ||\n\t\t(maxCount > 0 && maxCount > startCount && startCount >= 0)\n\t\t\t? setText(`Enter count and press 'set'`)\n\t\t\t: setText(\"Incorrect count!\")\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div className='border-block'>\n\t\t\t\t<SetCount\n\t\t\t\t\ttext={text}\n\t\t\t\t\tsetText={setTxt}\n\t\t\t\t\tcount={count}\n\t\t\t\t\tsetFunc={setFunc}\n\t\t\t\t\tdisabledSetButton={disabledSetButton}\n\t\t\t\t\tmaxCount={maxCount}\n\t\t\t\t\tsetMaxCount={setMaxCount}\n\t\t\t\t\tstartCount={startCount}\n\t\t\t\t\tsetStartCount={setStartCount}\n\t\t\t\t\tsetActiveMinCount={setActiveMinCount}\n\t\t\t\t\tsetActiveMaxCount={setActiveMaxCount}\n\t\t\t\t\tsetToLocalStorage={setToLocalStorage}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className='border-block'>\n\t\t\t\t<Score\n\t\t\t\t\tcount={count}\n\t\t\t\t\ttext={text}\n\t\t\t\t\tmaxCount={maxCount}\n\t\t\t\t\tstartCount={startCount}\n\t\t\t\t\tactiveMinCount={activeMinCount}\n\t\t\t\t\tactiveMaxCount={activeMaxCount}\n\t\t\t\t/>\n\t\t\t\t<div className='btnBorder'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttitle={\"inc\"}\n\t\t\t\t\t\tcount={count}\n\t\t\t\t\t\tbuttonFunction={incFunc}\n\t\t\t\t\t\tdisabled={disabledIncButton}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttitle={\"reset\"}\n\t\t\t\t\t\tcount={count}\n\t\t\t\t\t\tbuttonFunction={resFunc}\n\t\t\t\t\t\tdisabled={disabledResButton}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}